import { Provider } from 'web3/providers';
import { TestContracts } from './TestContracts';
import { EVM } from './EVM';
import { TestToken } from './TestToken';
import { Token } from '../../src/modules/Token';
import { TestAutoTrader } from './TestAutoTrader';
import { TestCallee } from './TestCallee';
import { TestSimpleCallee } from './TestSimpleCallee';
import { TestExchangeWrapper } from './TestExchangeWrapper';
import { TestPriceOracle } from './TestPriceOracle';
import { TestPolynomialInterestSetter } from './TestPolynomialInterestSetter';
import { TestDoubleExponentInterestSetter } from './TestDoubleExponentInterestSetter';
import { TestInterestSetter } from './TestInterestSetter';
import { AccountStatus, SendOptions, Index, Integer, TxResult, address } from '../../src/types';
export declare class Testing {
    private contracts;
    evm: EVM;
    tokenA: TestToken;
    tokenB: TestToken;
    tokenC: TestToken;
    erroringToken: TestToken;
    omiseToken: TestToken;
    autoTrader: TestAutoTrader;
    callee: TestCallee;
    simpleCallee: TestSimpleCallee;
    exchangeWrapper: TestExchangeWrapper;
    priceOracle: TestPriceOracle;
    polynomialInterestSetter: TestPolynomialInterestSetter;
    doubleExponentInterestSetter: TestDoubleExponentInterestSetter;
    interestSetter: TestInterestSetter;
    constructor(provider: Provider, contracts: TestContracts, token: Token);
    setProvider(provider: Provider): void;
    setAccountBalance(accountOwner: address, accountNumber: Integer, marketId: Integer, par: Integer, options?: SendOptions): Promise<TxResult>;
    setAccountStatus(accountOwner: address, accountNumber: Integer, status: AccountStatus, options?: SendOptions): Promise<TxResult>;
    setMarketIndex(marketId: Integer, index: Index, options?: SendOptions): Promise<TxResult>;
}
