import Web3 from 'web3';
import { Provider } from 'web3/providers';
import { Contracts } from './lib/Contracts';
import { Interest } from './lib/Interest';
import { Operation } from './modules/operate/Operation';
import { Token } from './modules/Token';
import { ExpiryV2 } from './modules/ExpiryV2';
import { FinalSettlement } from './modules/FinalSettlement';
import { Oracle } from './modules/Oracle';
import { Weth } from './modules/Weth';
import { Admin } from './modules/Admin';
import { Getters } from './modules/Getters';
import { LimitOrders } from './modules/LimitOrders';
import { StopLimitOrders } from './modules/StopLimitOrders';
import { CanonicalOrders } from './modules/CanonicalOrders';
import { LiquidatorProxy } from './modules/LiquidatorProxy';
import { Logs } from './modules/Logs';
import { SignedOperations } from './modules/SignedOperations';
import { Permissions } from './modules/Permissions';
import { Api } from './modules/Api';
import { Websocket } from './modules/Websocket';
import { StandardActions } from './modules/StandardActions';
import { WalletLogin } from './modules/WalletLogin';
import { SignOffChainAction } from './modules/SignOffChainAction';
import { SoloOptions, EthereumAccount, address } from './types';
export declare class Solo {
    contracts: Contracts;
    interest: Interest;
    token: Token;
    expiryV2: ExpiryV2;
    finalSettlement: FinalSettlement;
    oracle: Oracle;
    weth: Weth;
    web3: Web3;
    admin: Admin;
    getters: Getters;
    limitOrders: LimitOrders;
    stopLimitOrders: StopLimitOrders;
    canonicalOrders: CanonicalOrders;
    signedOperations: SignedOperations;
    liquidatorProxy: LiquidatorProxy;
    permissions: Permissions;
    logs: Logs;
    operation: Operation;
    api: Api;
    websocket: Websocket;
    standardActions: StandardActions;
    walletLogin: WalletLogin;
    signOffChainAction: SignOffChainAction;
    constructor(provider: Provider | string, networkId?: number, options?: SoloOptions);
    setProvider(provider: Provider, networkId: number): void;
    setDefaultAccount(account: address): void;
    getDefaultAccount(): address;
    loadAccount(account: EthereumAccount): void;
    protected createContractsModule(provider: Provider, networkId: number, web3: Web3, options: SoloOptions): any;
}
