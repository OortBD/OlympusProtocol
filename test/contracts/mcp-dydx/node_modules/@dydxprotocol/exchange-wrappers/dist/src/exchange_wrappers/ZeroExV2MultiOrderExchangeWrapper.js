"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var web3_utils_1 = __importDefault(require("web3-utils"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var deployed_json_1 = require("../../migrations/deployed.json");
var ZeroExV2MultiOrderExchangeWrapper = /** @class */ (function () {
    function ZeroExV2MultiOrderExchangeWrapper(networkId) {
        this.networkId = networkId;
    }
    ZeroExV2MultiOrderExchangeWrapper.prototype.getAddress = function () {
        return deployed_json_1.ZeroExV2MultiOrderExchangeWrapper[this.networkId.toString()].address;
    };
    ZeroExV2MultiOrderExchangeWrapper.prototype.setNetworkId = function (networkId) {
        this.networkId = networkId;
    };
    ZeroExV2MultiOrderExchangeWrapper.prototype.orderToBytes = function (multiOrder) {
        var result = [];
        if (!multiOrder.maxPrice || new bignumber_js_1.default(multiOrder.maxPrice).isZero()) {
            var zero = new bignumber_js_1.default(0);
            result = result
                .concat(this.toBytes(zero))
                .concat(this.toBytes(zero));
        }
        else {
            var base = new bignumber_js_1.default('1e18');
            var numerator = base.times(multiOrder.maxPrice).integerValue(bignumber_js_1.default.ROUND_CEIL);
            result = result
                .concat(this.toBytes(numerator))
                .concat(this.toBytes(base));
        }
        for (var i = 0; i < multiOrder.orders.length; i += 1) {
            var order = multiOrder.orders[i];
            result = result
                .concat(this.toBytes(order.makerAddress))
                .concat(this.toBytes(order.takerAddress))
                .concat(this.toBytes(order.feeRecipientAddress))
                .concat(this.toBytes(order.senderAddress))
                .concat(this.toBytes(order.makerAssetAmount))
                .concat(this.toBytes(order.takerAssetAmount))
                .concat(this.toBytes(order.expirationTimeSeconds))
                .concat(this.toBytes(order.salt))
                .concat(this.toBytes(order.signature));
        }
        return result;
    };
    ZeroExV2MultiOrderExchangeWrapper.prototype.toBytes = function (val) {
        return web3_utils_1.default.hexToBytes(web3_utils_1.default.padLeft(web3_utils_1.default.toHex(val), 64, '0'));
    };
    return ZeroExV2MultiOrderExchangeWrapper;
}());
exports.ZeroExV2MultiOrderExchangeWrapper = ZeroExV2MultiOrderExchangeWrapper;
//# sourceMappingURL=ZeroExV2MultiOrderExchangeWrapper.js.map