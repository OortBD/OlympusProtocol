/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { Callback, EventLog } from "web3/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";

export class IMatchingMarketV1 {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    getOffer(
      id: number | string
    ): TransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    _span(arg0: string, arg1: string): TransactionObject<string>;

    _best(arg0: string, arg1: string): TransactionObject<string>;

    isActive(id: number | string): TransactionObject<boolean>;

    offers(
      arg0: number | string
    ): TransactionObject<{
      pay_amt: string;
      pay_gem: string;
      buy_amt: string;
      buy_gem: string;
      owner: string;
      timestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    _dust(arg0: string): TransactionObject<string>;

    _menu(arg0: string | number[]): TransactionObject<boolean>;

    _near(arg0: number | string): TransactionObject<string>;

    _rank(
      arg0: number | string
    ): TransactionObject<{
      next: string;
      prev: string;
      delb: string;
      0: string;
      1: string;
      2: string;
    }>;

    getOwner(id: number | string): TransactionObject<string>;

    isTokenPairWhitelisted(
      baseToken: string,
      quoteToken: string
    ): TransactionObject<boolean>;

    getMinSell(pay_gem: string): TransactionObject<string>;

    getBestOffer(sell_gem: string, buy_gem: string): TransactionObject<string>;

    getWorseOffer(id: number | string): TransactionObject<string>;

    getBetterOffer(id: number | string): TransactionObject<string>;

    getOfferCount(sell_gem: string, buy_gem: string): TransactionObject<string>;

    getNextUnsortedOffer(id: number | string): TransactionObject<string>;

    isOfferSorted(id: number | string): TransactionObject<boolean>;

    getBuyAmount(
      buy_gem: string,
      pay_gem: string,
      pay_amt: number | string
    ): TransactionObject<string>;

    getPayAmount(
      pay_gem: string,
      buy_gem: string,
      buy_amt: number | string
    ): TransactionObject<string>;

    bump(id_: string | number[]): TransactionObject<void>;

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: number | string,
      buy_amt: number | string
    ): TransactionObject<string>;

    take(
      id: string | number[],
      maxTakeAmount: number | string
    ): TransactionObject<void>;

    kill(id: string | number[]): TransactionObject<void>;

    offer(
      pay_amt: number | string,
      pay_gem: string,
      buy_amt: number | string,
      buy_gem: string,
      pos: number | string
    ): TransactionObject<string>;

    buy(
      id: number | string,
      amount: number | string
    ): TransactionObject<boolean>;

    cancel(id: number | string): TransactionObject<boolean>;

    insert(
      id: number | string,
      pos: number | string
    ): TransactionObject<boolean>;

    del_rank(id: number | string): TransactionObject<boolean>;

    sellAllAmount(
      pay_gem: string,
      pay_amt: number | string,
      buy_gem: string,
      min_fill_amount: number | string
    ): TransactionObject<string>;

    buyAllAmount(
      buy_gem: string,
      buy_amt: number | string,
      pay_gem: string,
      max_fill_amount: number | string
    ): TransactionObject<string>;

    matchingEnabled(): TransactionObject<boolean>;
    last_offer_id(): TransactionObject<string>;
    close_time(): TransactionObject<string>;
    stopped(): TransactionObject<boolean>;
    buyEnabled(): TransactionObject<boolean>;
    getFirstUnsortedOffer(): TransactionObject<string>;
    isClosed(): TransactionObject<boolean>;
    getTime(): TransactionObject<string>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
  clone(): IMatchingMarketV1;
}
