/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { Callback, EventLog } from "web3/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";

export class IMatchOrders {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    matchOrders(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: number | string;
        takerAssetAmount: number | string;
        makerFee: number | string;
        takerFee: number | string;
        expirationTimeSeconds: number | string;
        salt: number | string;
        makerAssetData: (string | number[])[];
        takerAssetData: (string | number[])[];
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: number | string;
        takerAssetAmount: number | string;
        makerFee: number | string;
        takerFee: number | string;
        expirationTimeSeconds: number | string;
        salt: number | string;
        makerAssetData: (string | number[])[];
        takerAssetData: (string | number[])[];
      },
      leftSignature: (string | number[])[],
      rightSignature: (string | number[])[]
    ): TransactionObject<{
      left: {
        makerAssetFilledAmount: string;
        takerAssetFilledAmount: string;
        makerFeePaid: string;
        takerFeePaid: string;
      };
      right: {
        makerAssetFilledAmount: string;
        takerAssetFilledAmount: string;
        makerFeePaid: string;
        takerFeePaid: string;
      };
      leftMakerAssetSpreadAmount: string;
    }>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
  clone(): IMatchOrders;
}
