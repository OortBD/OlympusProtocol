/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { Callback, EventLog } from "web3/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";

export class SaiDaiExchangeWrapper {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    getExchangeCost(
      arg0: string,
      arg1: string,
      desiredMakerToken: number | string,
      arg3: (string | number[])[]
    ): TransactionObject<string>;

    exchange(
      arg0: string,
      receiver: string,
      makerToken: string,
      takerToken: string,
      requestedFillAmount: number | string,
      arg5: (string | number[])[]
    ): TransactionObject<string>;

    SAI(): TransactionObject<string>;
    MIGRATION_CONTRACT(): TransactionObject<string>;
    DAI(): TransactionObject<string>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
  clone(): SaiDaiExchangeWrapper;
}
