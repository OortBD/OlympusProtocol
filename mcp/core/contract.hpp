#pragma once
#include "transaction.hpp"
#include <account/base.hpp>
#include <libdevcore/Address.h>

namespace mcp
{
	const std::string DENContractABI = "[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"stores4\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"intstores\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"addressstores\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stringstores\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"boolstores\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"bytesstores\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"key\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"v1\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"v2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"v3\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"v4\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"v5\",\"type\":\"bytes\"}],\"name\":\"setreturns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"key\",\"type\":\"int256\"}],\"name\":\"getreturns\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true}]";
	const dev::Address DENContractAddress = dev::Address("0xD2b53c6dcF4EB754DE108ec0420EE7EcfC1223B3");
	const dev::Address DENcallcAddress = dev::Address("0x1144b522f45265c2dfdbaee8e324719e63a1694c");

	class DENContractCaller
	{
	public:
		DENContractCaller(){}
		DENContractCaller(dev::BoundContract _contract) :contract(_contract) {}

		//demo
		// returns int v1, dev::Address v2, std::string v3, bool v4, dev::bytes v5
		template<typename... Args>
		void getreturns(int & v1, dev::h160& v2, std::string& v3, bool& v4, dev::bytes& v5, Args const&... args);
	private:
		dev::BoundContract contract;
	};

	DENContractCaller NewDENContractCaller(dev::ContractCaller const& _caller);

	/// args: abi input
	/// v1,v2,v3,v4,v5 return values
	template<typename... Args>
	inline void DENContractCaller::getreturns(int & v1, dev::h160& v2, std::string& v3, bool& v4, dev::bytes& v5, Args const&... args)
	{
		std::string method = "getreturns";
		dev::CallOpts opts{ DENcallcAddress };
		dev::bytes ret = contract.Call(&opts, method, args...);
		contract.Unpack(method, ret, v1, v2, v3, v4, v5);
	}

	///ContractCaller instance
	extern DENContractCaller DENCaller;

	///mainnet witness contract
	const dev::bytes MainContractByteCode(dev::fromHex("0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d72806100606000396000f3fe60806040526004361061004a5760003560e01c80631d01364c1461004f5780633ccfd60b1461007a57806388d695b2146100915780638da5cb5b146100ba578063d0e30db0146100e5575b600080fd5b34801561005b57600080fd5b506100646100ef565b60405161007191906105d2565b60405180910390f35b34801561008657600080fd5b5061008f6100f5565b005b34801561009d57600080fd5b506100b860048036038101906100b391906108a7565b610261565b005b3480156100c657600080fd5b506100cf6104ec565b6040516100dc919061092e565b60405180910390f35b6100ed610510565b005b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017a906109cc565b60405180910390fd5b6000479050600060018190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516101d790610a1d565b60006040518083038185875af1925050503d8060008114610214576040519150601f19603f3d011682016040523d82523d6000602084013e610219565b606091505b505090508061025d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025490610a7e565b60405180910390fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e6906109cc565b60405180910390fd5b8051825114610333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032a90610b10565b60405180910390fd5b6000805b825181101561037b5782818151811061035357610352610b30565b5b6020026020010151826103669190610b8e565b9150808061037390610bc2565b915050610337565b508060015410156103c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b890610c7c565b60405180910390fd5b60005b83518110156104e65760008482815181106103e2576103e1610b30565b5b60200260200101519050600084838151811061040157610400610b30565b5b6020026020010151905060008273ffffffffffffffffffffffffffffffffffffffff168260405161043190610a1d565b60006040518083038185875af1925050503d806000811461046e576040519150601f19603f3d011682016040523d82523d6000602084013e610473565b606091505b50509050806104b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ae90610ce8565b60405180910390fd5b81600160008282546104c99190610d08565b9250508190555050505080806104de90610bc2565b9150506103c4565b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595906109cc565b60405180910390fd5b34600160008282546105b09190610b8e565b92505081905550565b6000819050919050565b6105cc816105b9565b82525050565b60006020820190506105e760008301846105c3565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61064f82610606565b810181811067ffffffffffffffff8211171561066e5761066d610617565b5b80604052505050565b60006106816105ed565b905061068d8282610646565b919050565b600067ffffffffffffffff8211156106ad576106ac610617565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ee826106c3565b9050919050565b6106fe816106e3565b811461070957600080fd5b50565b60008135905061071b816106f5565b92915050565b600061073461072f84610692565b610677565b90508083825260208201905060208402830185811115610757576107566106be565b5b835b81811015610780578061076c888261070c565b845260208401935050602081019050610759565b5050509392505050565b600082601f83011261079f5761079e610601565b5b81356107af848260208601610721565b91505092915050565b600067ffffffffffffffff8211156107d3576107d2610617565b5b602082029050602081019050919050565b6107ed816105b9565b81146107f857600080fd5b50565b60008135905061080a816107e4565b92915050565b600061082361081e846107b8565b610677565b90508083825260208201905060208402830185811115610846576108456106be565b5b835b8181101561086f578061085b88826107fb565b845260208401935050602081019050610848565b5050509392505050565b600082601f83011261088e5761088d610601565b5b813561089e848260208601610810565b91505092915050565b600080604083850312156108be576108bd6105f7565b5b600083013567ffffffffffffffff8111156108dc576108db6105fc565b5b6108e88582860161078a565b925050602083013567ffffffffffffffff811115610909576109086105fc565b5b61091585828601610879565b9150509250929050565b610928816106e3565b82525050565b6000602082019050610943600083018461091f565b92915050565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e2e000000000000000000000000000000000000000000000000000000000000602082015250565b60006109b6602283610949565b91506109c18261095a565b604082019050919050565b600060208201905081810360008301526109e5816109a9565b9050919050565b600081905092915050565b50565b6000610a076000836109ec565b9150610a12826109f7565b600082019050919050565b6000610a28826109fa565b9150819050919050565b7f5769746864726177206661696c65642e00000000000000000000000000000000600082015250565b6000610a68601083610949565b9150610a7382610a32565b602082019050919050565b60006020820190508181036000830152610a9781610a5b565b9050919050565b7f526563697069656e747320616e6420616d6f756e747320617272617973206d7560008201527f73742068617665207468652073616d65206c656e6774682e0000000000000000602082015250565b6000610afa603883610949565b9150610b0582610a9e565b604082019050919050565b60006020820190508181036000830152610b2981610aed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b99826105b9565b9150610ba4836105b9565b9250828201905080821115610bbc57610bbb610b5f565b5b92915050565b6000610bcd826105b9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610bff57610bfe610b5f565b5b600182019050919050565b7f546865206465706f736974656420616d6f756e74206973206e6f7420656e6f7560008201527f676820746f20636f76657220746865207472616e73666572732e000000000000602082015250565b6000610c66603a83610949565b9150610c7182610c0a565b604082019050919050565b60006020820190508181036000830152610c9581610c59565b9050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000610cd2601083610949565b9150610cdd82610c9c565b602082019050919050565b60006020820190508181036000830152610d0181610cc5565b9050919050565b6000610d13826105b9565b9150610d1e836105b9565b9250828203905081811115610d3657610d35610b5f565b5b9291505056fea264697066735822122014f0288254526e6fa6fbdec370216f4bd9724a4d4db7f970b2de5b827b9ac1ff64736f6c63430008120033"));
	const std::string MainContractABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
	const dev::Address MainContractAddress = dev::Address("0xD2b53c6dcF4EB754DE108ec0420EE7EcfC1223B3");
	const dev::Address MainCallcAddress = dev::Address("0x1144b522f45265c2dfdbaee8e324719e63a1694c");
	Transaction InitMainContractTransaction();

	class MainContractCaller
	{
	public:
		MainContractCaller() {}
		MainContractCaller(dev::BoundContract _contract) :contract(_contract) {}

		dev::bytes BatchTransfer(std::map<dev::Address, u256> const& _v);
	private:
		dev::CallOpts DefaultOpts{ MainCallcAddress };
		dev::BoundContract contract;
	};

	MainContractCaller NewMainContractCaller(dev::ContractCaller const& _caller);
	///ContractCaller instance
	extern MainContractCaller MainCaller;
}
